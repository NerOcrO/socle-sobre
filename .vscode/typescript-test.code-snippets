{
  "role = heading": {
    "prefix": "_getByHeading",
    "scope": "typescript",
    "description": "Tester un titre",
    "body": [
      "const titre = screen.getByRole('heading', { level: XXX, name: 'XXX' })",
      "expect(titre).toBeInTheDocument()",
    ],
  },
  "role = region": {
    "prefix": "_getBySection",
    "scope": "typescript",
    "description": "Tester une section",
    "body": [
      "const sectionXXX = screen.getByRole('region', { name: 'XXX' })",
      "const enTeteXXX = within(sectionXXX).getByRole('banner')",
      "const titreXXX = within(enTeteXXX).getByRole('heading', { level: 2, name: 'XXX' })",
      "expect(titreXXX).toBeInTheDocument()",
      "const articleXXX = within(sectionXXX).getByRole('article', { name: 'XXX' })",
    ],
  },
  "role = navigation": {
    "prefix": "_getByNavigation",
    "scope": "typescript",
    "description": "Tester une navigation",
    "body": [
      "const navigation = screen.getByRole('navigation', { name: 'XXX' })",
      "const menu = within(navigation).getByRole('list')",
      "const menuItems = within(menu).getAllByRole('listitem')",
      "expect(menuItems).toHaveLength(XXX)",
      "const XXX = within(menuItems[0]).getByRole('link', { current: 'page', name: 'XXX' })",
      "expect(XXX).toHaveAttribute('href', 'XXX')",
      "const XXX = within(menuItems[1]).getByRole('link', { current: false, name: 'XXX' })",
      "expect(XXX).toHaveAttribute('href', 'XXX')",
    ],
  },
  "role = list": {
    "prefix": "_getByList",
    "scope": "typescript",
    "description": "Tester une liste",
    "body": [
      "const menu = screen.getByRole('list')",
      "const menuItems = within(menu).getAllByRole('listitem')",
      "expect(menuItems).toHaveLength(XXX)",
      "expect(menuItems[0].textContent).toBe('XXX')",
      "expect(menuItems[1].textContent).toBe('XXX')",
    ],
  },
  "role = description": {
    "prefix": "_getByDescription",
    "scope": "typescript",
    "description": "Tester une liste de description",
    "body": [
      "const description = screen.getByRole('list', { name: 'XXX' })",
      "const termes = within(description).getAllByRole('term')",
      "const definitions = within(description).getAllByRole('definition')",
      "expect(termes).toHaveLength(XXX)",
      "const XXX = within(termes[0]).getByText('XXX')",
      "expect(XXX).toBeInTheDocument()",
      "const XXX = within(definitions[0]).getByText('XXX')",
      "expect(XXX).toBeInTheDocument()",
    ],
  },

  "role = dialog": {
    "prefix": "_getByDialog",
    "scope": "typescript",
    "description": "Tester une boîte de dialogue",
    "body": [
      "const drawer = screen.getByRole('dialog', { hidden: false, name: 'XXX' })",
      "expect(drawer).toHaveAttribute('id', 'drawerXXXId')",
      "const titre = within(drawer).getByRole('heading', { level: 1, name: 'XXX' })",
      "expect(titre).toBeInTheDocument()",
    ],
  },
  "role = internal link": {
    "prefix": "_getByLink",
    "scope": "typescript",
    "description": "Tester un lien interne",
    "body": [
      "const XXX = screen.getByRole('link', { name: 'XXX' })",
      "// Si le label n'est pas assez explicite",
      "// const XXX = screen.getByRole('link', { description: 'XXX', name: 'XXX' })",
      "expect(XXX).toHaveAttribute('href', 'XXX')",
    ],
  },
  "role = external link": {
    "prefix": "_getByExternalLink",
    "scope": "typescript",
    "description": "Tester un lien externe",
    "body": [
      "const XXX = screen.getByRole('link', { name: 'XXX' })",
      "expect(XXX).toHaveAttribute('href', 'XXX')",
      "expect(XXX).toOpenInNewTab('XXX')",
    ],
  },
  "role = table": {
    "prefix": "_getByTable",
    "scope": "typescript",
    "description": "Tester un tableau",
    "body": [
      "const table = screen.getByRole('table', { name: 'XXX' })",
      "const [head, body] = within(table).getAllByRole('rowgroup')",
      "const rowHead = within(head).getByRole('row')",
      "const columnsHead = within(rowHead).getAllByRole('columnheader')",
      "expect(columnsHead).toHaveLength(XXX)",
      "expect(columnsHead[0].textContent)).toBe(XXX)",
      "expect(columnsHead[0]).toHaveAttribute('scope', 'col')",
      "expect(columnsHead[1].textContent)).toBe(XXX)",
      "expect(columnsHead[1]).toHaveAttribute('scope', 'col')",
      "const rowsBody = within(body).getAllByRole('row')",
      "const columns1Body = within(rowsBody[0]).getAllByRole('cell')",
      "expect(columns1Body).toHaveLength(XXX)",
      "expect(columns1Body[0].textContent).toBe(XXX)",
      "expect(columns1Body[1].textContent).toBe(XXX)",
      "const columns2Body = within(rowsBody[1]).getAllByRole('cell')",
      "expect(columns2Body).toHaveLength(XXX)",
      "expect(columns2Body[0].textContent).toBe(XXX)",
      "expect(columns2Body[1].textContent).toBe(XXX)",
    ],
  },
  "role = form": {
    "prefix": "_getByForm",
    "scope": "typescript",
    "description": "Tester un formulaire",
    "body": [
      "const formulaire = within(drawer).getByRole('form', { name: 'XXX' })",
      "// S'il est dans un drawer",
      "// expect(formulaire).toHaveAttribute('method', 'dialog')",
    ],
  },
  "role = group": {
    "prefix": "_getByFieldset",
    "scope": "typescript",
    "description": "Tester un fieldset",
    "body": ["const fieldset = within(formulaire).getByRole('group', { name: 'XXX' })"],
  },
  "role = combobox": {
    "prefix": "_getBySelect",
    "scope": "typescript",
    "description": "Tester un select/option",
    "body": [
      "const XXX = within(formulaire).getByRole('combobox', { name: 'XXX' })",
      "expect(XXX).toBeRequired() // ou .not",
      "expect(XXX).toHaveLength(XXX)",
      "const XXX = within(XXX).getByRole('option', { name: 'XXX', selected: true })",
      "expect(XXX).toBeInTheDocument()",
      "// Pas besoin de tester le name ni la value car cela est fait à travers la server action",
    ],
  },
  "role = number": {
    "prefix": "_getByNumber",
    "scope": "typescript",
    "description": "Tester un champ numérique (il n'a pas de role)",
    "body": [
      "const XXX = within(formulaire).getByRole('spinbutton', { name: 'XXX' })",
      "expect(XXX).toBeRequired() // ou .not",
      "expect(XXX).toHaveAttribute('type', 'number')",
      "expect(XXX).toHaveAttribute('min', 'XXX')",
      "// expect(XXX).toHaveAttribute('placeholder', 'XXX')",
      "expect(XXX).toHaveValue('XXX')",
    ],
  },
  "role = textbox": {
    "prefix": "_getByTextbox",
    "scope": "typescript",
    "description": "Tester un champ texte",
    "body": [
      "const XXX = within(formulaire).getByRole('textbox', { name: 'XXX' })",
      "expect(XXX).toBeRequired() // ou .not",
      "expect(XXX).toHaveAttribute('type', 'text')",
      "// expect(XXX).toHaveAttribute('placeholder', 'XXX')",
      "expect(XXX).toHaveValue('XXX')",
    ],
  },
  "role = textarea": {
    "prefix": "_getByTextarea",
    "scope": "typescript",
    "description": "Tester un textarea",
    "body": [
      "const XXX = within(formulaire).getByRole('textbox', { name: 'XXX' })",
      "expect(XXX).toBeRequired() // ou .not",
      "expect(XXX).toHaveAttribute('maxLength', 'XXX')",
      "// expect(XXX).toHaveAttribute('placeholder', 'XXX')",
      "expect(XXX).toHaveValue('XXX')",
    ],
  },
  "role = richtexteditor": {
    "prefix": "_getByRichTextEditor",
    "scope": "typescript",
    "description": "Tester un éditeur de texte enrichi",
    "body": [
      "const editeurDeTextEnrichi = within(formulaire).getByRole('textarea', { name: 'XXX' })",
      "expect(editeurDeTextEnrichi).toBeInTheDocument()",
    ],
  },
  "role = radio": {
    "prefix": "_getByRadio",
    "scope": "typescript",
    "description": "Tester un bouton radio",
    "body": [
      "const XXX = within(formulaire).getByRole('radio', { checked: true, name: 'XXX' })",
      "expect(XXX).toBeRequired() // ou .not",
      "// Pas besoin de tester le name ni la value car cela est fait à travers la server action",
    ],
  },
  "role = checkbox": {
    "prefix": "_getByCheckbox",
    "scope": "typescript",
    "description": "Tester une case à cocher",
    "body": [
      "const XXX = within(formulaire).getByRole('checkbox', { checked: false, name: 'XXX' })",
      "expect(XXX).toBeRequired() // ou .not",
      "// Pas besoin de tester le name ni la value car cela est fait à travers la server action",
    ],
  },
  "role = button button": {
    "prefix": "_getByButton",
    "scope": "typescript",
    "description": "Tester un bouton",
    "body": [
      "const XXX = screen.getByRole('button', { name: 'XXX' })",
      "// Si le label n'est pas assez explicite",
      "// const XXX = screen.getByRole('button', { description: 'XXX', name: 'XXX' })",
      "// Si c'est un bouton qui ouvre un drawer",
      "// expect(XXX).toHaveAttribute('aria-controls', 'drawerXXXId')",
      "expect(XXX).toHaveAttribute('type', 'button')",
    ],
  },
  "role = submit button": {
    "prefix": "_getBySubmitButton",
    "scope": "typescript",
    "description": "Tester un bouton de type submit",
    "body": [
      "const XXX = within(formulaire).getByRole('button', { name: 'XXX' })",
      "expect(XXX).toHaveAttribute('type', 'submit')",
      "expect(XXX).toHaveAttribute('aria-controls', 'drawerXXXId')",
      "// L'un ou l'autre",
      "expect(XXX).toBeEnabled()",
      "expect(XXX).toBeDisabled()",
    ],
  },
  "input de type file": {
    "prefix": "_getByFile",
    "scope": "typescript",
    "description": "Tester un champ d'upload (il n'a pas de role)",
    "body": [
      "const XXX = within(formulaire).getByLabelText('XXX')",
      "expect(XXX).toBeRequired() // ou .not",
      "expect(XXX).toHaveAttribute('type', 'file')",
    ],
  },
  "input de type date": {
    "prefix": "_getByDate",
    "scope": "typescript",
    "description": "Tester un champ de date (il n'a pas de role)",
    "body": [
      "const XXX = within(formulaire).getByLabelText('XXX')",
      "expect(XXX).toBeRequired() // ou .not",
      "expect(XXX).toHaveAttribute('type', 'date')",
      "// expect(XXX).toHaveAttribute('placeholder', 'XXX')",
      "expect(XXX).toHaveValue('XXX')",
    ],
  },
  "rechercher par un texte": {
    "prefix": "_getByText",
    "scope": "typescript",
    "description": "Tester une chaîne de caractères",
    "body": [
      "const XXX = screen.getByText('XXX', { selector: 'p' })",
      "expect(XXX).toBeInTheDocument()",
    ],
  },
  "presser le bouton": {
    "prefix": "_presserLeBouton",
    "scope": "typescript",
    "description": "Presser le bouton",
    "body": [
      "const button = screen.getByRole('button', { description: 'XXX', name: 'XXX' })",
      "fireEvent.click(button)",
      "return button",
    ],
  },
  "cocher la case": {
    "prefix": "_cocherLaCase",
    "scope": "typescript",
    "description": "Cocher la case",
    "body": ["fireEvent.click(screen.getByRole('checkbox', { name: 'XXX' }))"],
  },
  "presser le bouton radio": {
    "prefix": "_presserLeBoutonRadio",
    "scope": "typescript",
    "description": "Presser le bouton radio",
    "body": ["fireEvent.click(screen.getByRole('radio', { name: 'XXX' }))"],
  },
  "saisir le texte": {
    "prefix": "_saisirLeTexte",
    "scope": "typescript",
    "description": "Saisir le texte",
    "body": [
      "const input = screen.getByLabelText('XXX')",
      "fireEvent.change(input, { target: { value: 'XXX' } })",
      "return input",
    ],
  },
  "sélectionner l'élement": {
    "prefix": "_selectionnerLElement",
    "scope": "typescript",
    "description": "Sélectionner l'élement",
    "body": ["await select('XXX', 'XXX')"],
  },
  "doublure de conceal": {
    "prefix": "_stubbedConceal",
    "scope": "typescript",
    "description": "La doublure de la fonction DSFR conceal pour fermer le drawer",
    "body": ["vi.stubGlobal('dsfr', stubbedConceal())"],
  },
    "describe": {
    "prefix": "_describe",
    "description": "describe",
    "body": [
      "describe('$1', () => {",
      "  it('$2', () => {",
      "    // GIVEN",
      "",
      "    // WHEN",
      "",
      "    // THEN",
      "    expect(true).toBeFalsy()",
      "  })",
      "})",
      "",
    ],
  },
  "it": {
    "prefix": "_it",
    "description": "it",
    "body": [
      "it('$1', () => {",
      "  // GIVEN",
      "",
      "  // WHEN",
      "",
      "  // THEN",
      "  expect(true).toBeFalsy()",
      "})",
      "",
    ],
  },
}
