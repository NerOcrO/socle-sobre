{
  "api": {
    "prefix": "_api",
    "scope": "typescript",
    "description": "Template d'une route API (controller)",
    "body": [
      "import { APIContext } from \"astro\"",
      "",
      "export async function GET({ request }: APIContext): Promise<Response> {",
      "  // Valider les données extérieures",
      "  const url = new URL(request.url)",
      "  const xxx = url.searchParams.get(\"XXX\") ?? \"\"",
      "  const format = request.headers.get(\"Accept\") ?? \"\"",
      "",
      "  try {",
      "    const loader = new XXXLoader()",
      "    const readModel = await loader.get()",
      "",
      "    if (format === \"application/json\") {",
      "      return new Response(JSON.stringify(readModel), { headers: { \"Content-Type\": \"application/json; charset=utf-8\" } })",
      "    }",
      "",
      "    return new Response(renderHTML(XXX, { props: { XXX } }), { headers: { \"Content-Type\": \"text/html; charset=utf-8\" } })",
      "  } catch (error) {",
      "    // eslint-disable-next-line no-console",
      "    console.error(\"XXX\", error)",
      "    return new Response(\"XXX\", { status: 500 })",
      "  }",
      "}",
      "",
      "export async function POST({ request }: APIContext): Promise<Response> {",
      "  // Valider les données extérieures",
      "  const format = request.headers.get(\"Accept\") ?? \"\"",
      "",
      "  try {",
      "   const repository = new PrismaXXXRepository()",
      "    await new [USECASE](repository).execute({ XXX })",
      "",
      "    if (format === \"application/json\") {",
      "      return new Response(JSON.stringify(\"XXX\"), { headers: { \"Content-Type\": \"application/json; charset=utf-8\" } })",
      "    }",
      "",
      "    return new Response(\"XXX\", { status: 201 })",
      "  } catch (error) {",
      "    // eslint-disable-next-line no-console",
      "    console.error(\"XXX\", error)",
      "    return new Response(\"XXX\", { status: 500 })",
      "  }",
      "}",
      "",
      "export function PUT(): Response {",
      "  return new Response(\"Not implemented\", { status: 501 })",
      "}",
      "",
      "export function PATCH(): Response {",
      "  return new Response(\"Not implemented\", { status: 501 })",
      "}",
      "",
      "export function DELETE(): Response {",
      "  return new Response(\"Not implemented\", { status: 501 })",
      "}",
    ],
  },
  "repository": {
    "prefix": "_repository",
    "scope": "typescript",
    "description": "Template d'un repository (gateway)",
    "body": [
      "import { Prisma } from \"@prisma/client\"",
      "",
      "import prisma from \"../../prisma/prismaClient\"",
      "import { SaveXXXRepository } from \"../use-cases/ports/repositories\"",
      "",
      "export class $TM_FILENAME_BASE implements SaveXXXRepository {",
      "  readonly #dataResource = prisma.XXXRecord",
      "",
      "  async save(XXX: Array<XXX>): Promise<void> {",
      "    await this.#dataResource.create({ data: XXX })",
      "  }",
      "}",
    ],
  },
  "loader": {
    "prefix": "_loader",
    "scope": "typescript",
    "description": "Template d'un loader (gateway)",
    "body": [
      "import { Prisma } from \"@prisma/client\"",
      "",
      "import prisma from \"../../prisma/prismaClient\"",
      "import { XXXReadModel } from \"../use-cases/ports/repositories\"",
      "import { XXXLoader } from \"../use-cases/ports/loaders\"",
      "",
      "export class $TM_FILENAME_BASE implements XXXLoader {",
      "  readonly #dataResource = prisma.XXXRecord",
      "",
      "  async get(id: string): Promise<XXXReadModel> {",
      "    const record = await this.#dataResource.findFirstOrThrow({",
      "      where: {",
      "        id,",
      "      },",
      "    })",
      "",
      "    return toReadModel(record)",
      "  }",
      "}",
      "",
      "function toReadModel(record: Prisma.XXXRecordGetPayload): XXXReadModel {",
      "  return {",
      "    nom: record.nom,",
      "  }",
      "}",
      "",
    ],
  },
  "command": {
    "prefix": "_command",
    "scope": "typescript",
    "description": "Template d'un command handler (use case)",
    "body": [
      "import { CommandHandler, ResultAsync } from '../CommandHandler'",
      "import { GetUtilisateurRepository } from './shared/UtilisateurRepository'",
      "",
      "export class $TM_FILENAME_BASE implements CommandHandler<Command> {",
      "  readonly #repository: UtilisateurRepository",
      "  // Ajouter les autres repository",
      "",
      "  constructor(",
      "    repository: UtilisateurRepository",
      "    // Ajouter les autres repository",
      "  ) {",
      "    this.#repository = repository",
      "  }",
      "",
      "  async execute(command: Command): ResultAsync<Failure> {",
      "    const gestionnaire = await this.#repository.get(command.idGestionnaire)",
      "",
      "    // Utiliser les autres repository, ajouter les règles métier et l'écriture en base de données",
      "",
      "    return 'OK'",
      "  }",
      "}",
      "",
      "type Command = {",
      "  idXXX: string",
      "}",
      "",
    ],
  },
  "apostrophe Français": {
    "prefix": "_apostrophe",
    "description": "L’apostrophe Français",
    "body": ["’"],
  },
}
